package base

/*
问题一
你知道设置 GOPATH 有什么意义吗？
1.GOPATH 简单理解成 Go 语言的工作目录，它的值是一个目录的路径，也可以是多个目录路径，
每个目录都代表 Go 语言的一个工作区（workspace）
2.我们需要利于这些工作区，去放置 Go 语言的源码文件（source file），以及安装（install）
后的归档文件（archive file，也就是以“.a”为扩展名的文件）和可执行文件（executable file）。
(
Go 语言项目在其生命周期内的所有操作（编码、依赖管理、构建、测试、安装等）基本上都是围绕着 GOPATH 和工作区进行的.
Go 语言源码的组织方式就是以环境变量 GOPATH、工作区、src 目录和代码包为主线的.
)

go build 操作参数
-x 这样可以看到go build命令具体都执行了哪些操作。
-a 不但目标代码包总是会被编译，它依赖的代码包也总会被编译，即使依赖的是标准库中的代码包也是如此
-n 只查看具体操作而不执行它们
-v 这样可以看到go build命令编译的代码包的名称。它在与-a标记搭配使用时很有用

go install

go get
会自动从一些主流公用代码仓库（比如 GitHub）下载目标代码包，并把它们安装到环境变量GOPATH包含的第 1 工作区的相应目录中。
如果存在环境变量GOBIN，那么仅包含命令源码文件的代码包会被安装到GOBIN指向的那个目录
最常用的几个标记有下面几种。
-u：下载并安装代码包，不论工作区中是否已存在它们。
-d：只下载代码包，不安装代码包。
-fix：在下载代码包后先运行一个用于根据当前Go 语言版本修正代码的工具，然后再安装代码包。
-t：同时下载测试所需的代码包。
-insecure：允许通过非安全的网络协议下载和安装代码包。HTTP 就是这样的协议。


问题二
Go 语言在多个工作区中查找依赖包的时候是以怎样的顺序进行的？

问题三
如果在多个工作区中都存在导入路径相同的代码包会产生冲突吗？

*/
